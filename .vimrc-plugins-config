"======  ycm configs ======"
" C-family Semantic Completion
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
" Python Semantic Completion
let g:ycm_python_binary_path = '/usr/bin/python'
let g:ycm_server_python_interpreter='/usr/bin/python'
" ycm options, see https://github.com/Valloric/YouCompleteMe#options
let g:ycm_seed_identifiers_with_syntax=1
let g:ycm_complete_in_comments=1
let g:ycm_collect_identifiers_from_tags_files=1
" minimum number at which auto-completion displays
let g:ycm_min_num_of_chars_for_completion=1

"====== ultisnips config ======"
" custom key binding of ultisnips to integrate with ycm
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

"====== vim-markdown config ======"
let g:vim_markdown_new_list_item_indent = 2
" code block program lang shortcut
let g:vim_markdown_fenced_languages = ['javascript=js']

"====== goyo.vim config ======"
map <C-g> :Goyo<CR>
let g:goyo_width = 125

"====== limelight.vim config ======"
map <C-l> :Limelight!!<CR>
" Color name (:help cterm-colors) or ANSI code
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240
"
" Color name (:help gui-colors) or RGB color
let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_conceal_guifg = '#777777'

"====== vim-airline config ======"
let g:airline_section_warning = '%{SyntasticStatuslineFlag()}'
" tabline config
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
" disable 'show_buffer' to stop buffering after closing the file
" let g:airline#extensions#tabline#show_buffers = 0
" when there are too many tabs, show this
let tabEllipsis = '…'
" map hot key <Shift>+r in order to move to previous tab
map <s-r> :bp<CR>
" map hot key <Shift>+t in order to move to next tab
map <s-t> :bn<CR>
" map hot key <Shift>+y to close the attached tab
map <s-y> :bd<CR>

"====== vim-gitgutter config ====="
map <s-g> :GitGutterLineHighlightsToggle<CR>

"====== vim-syntastic config ======"
map <s-c> :SyntasticToggleMode<CR>
let g:syntastic_javascript_checkers = ['standard']
let g:syntastic_javascript_standard_generic = 1
"let g:syntastic_javascript_checkers = ['eslint']
"let g:syntastic_javascript_eslint_exec = 'eslint'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

"====== NERDtree config ======"
"autocmd vimenter * NERDTree " uncomment if you want NERDTree when you enter
map <C-t> :NERDTreeToggle<CR>

"===== NERDTree git plugin config"
let g:NERDTreeGitStatusIndicatorMapCustom = {
  \ "Modified"  : "!",
  \ "Staged"    : "✚",
  \ "Untracked" : "?",
  \ "Renamed"   : ">",
  \ "Unmerged"  : "═",
  \ "Deleted"   : "x",
  \ "Dirty"     : "✗",
  \ "Clean"     : "✔︎",
  \ 'Ignored'   : '☒',
  \ "Unknown"   : "??"
  \}

"====== vim-snipmate config ======"
let g:snipMate = { 'snippet_version' : 1 }